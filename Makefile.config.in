VERSION=@PACKAGE_VERSION@
NAME=@PACKAGE_NAME@

CFLAGS=@CFLAGS@ -fPIC -Wall -pedantic -Werror -Wno-long-long -warn-error FPSXY
CPPFLAGS=@CPPFLAGS@
LDFLAGS=@LDFLAGS@

OCAMLFIND=@OCAMLFIND@

DOSELIBS = _build/doselibs

DESTDIR =
ifeq ($(DESTDIR),)
exec_prefix=@prefix@
BINDIR=@bindir@
LIBDIR=$(shell ocamlfind printconf destdir)

INSTALL=$(OCAMLFIND) install -destdir $(LIBDIR)
UNINSTALL=$(OCAMLFIND) remove -destdir $(LIBDIR)
else
LIBDIR = $(DESTDIR)/$(shell ocamlc -where)
BINDIR = $(DESTDIR)/usr/bin

INSTALL = $(OCAMLFIND) install -destdir $(LIBDIR)
UNINSTALL = $(OCAMLFIND) remove -destdir $(LIBDIR)
endif

ifeq ("@OCAML_OS_TYPE@","freebsd")
  LDFLAGS += -fstack-protector
endif

ifeq ("@CAMLP4OOPT@","camlp4o.opt")
  CAMLP4CMXS=_build/Camlp4MacroParser.cmxs
else
  CAMLP4CMXS=
endif

ifeq ("@OCAMLBEST@","opt")
  OCAMLBEST=native
  OCAMLBUILD=@OCAMLBUILD@
  INSTALLOPTS=-s
else
  OCAMLBEST=byte
  OCAMLBUILD=@OCAMLBUILD@ -byte-plugin
  INSTALLOPTS=
endif

TARGETS= \
   distcheck.$(OCAMLBEST) \
   deb-buildcheck.$(OCAMLBEST) \
   ceve.$(OCAMLBEST) \
   apt-cudf.$(OCAMLBEST) \
   outdated.$(OCAMLBEST) \
   challenged.$(OCAMLBEST) \
   deb-coinstall.$(OCAMLBEST) \

BYTELIBS=
OPTLIBS=
CMXSLIBS=
ALIBS=
SUFFIX=cma

ifeq ("@HAS_LIBCUDF@","no")
  LIBNAMES += cudf/cudf
endif

LIBNAMES += common/common \
						algo/algo \
						deb/debian \
						opencsw/csw \
						eclipse/eclipse \
						cv/cv \
						doseparseNoRpm/doseparseNoRpm \
						doseparse/doseparse

#rpm support
ifeq ("@HAS_RPM@","yes")
  LIBNAMES += rpm/rpm
endif

BYTELIBNAMES=$(notdir $(LIBNAMES))
BYTELIBS=$(BYTELIBNAMES:%=$(DOSELIBS)/%.cma)

ifeq ("@OCAMLBEST@","opt")
	SUFFIX += cmxa cmxs a
  OPTLIBS += $(BYTELIBS:%.cma=%.cmxa) 
  CMXSLIBS += $(BYTELIBS:%.cma=%.cmxs)
  ALIBS = $(BYTELIBS:%.cma=%.a)
endif

ifeq ("@HAS_XML@","yes")
ifeq ("@HAS_CURL@","yes")
  EXPERIMENTAL += experimental/dudftocudf/deb-dudftocudf.$(OCAMLBEST)
endif
endif

#ocamlgraph support
ifeq ("@HAS_OCAMLGRAPH@","yes")
  TARGETS += \
	     strong-deps.$(OCAMLBEST) \
	     dominators-graph.$(OCAMLBEST)
  
  EXPERIMENTAL += strong-conflicts.$(OCAMLBEST)
endif

#ocamlgraph support
ifeq ("@HAS_OCAMLGRAPH@","yes")
  TARGETS += \
	     smallworld.$(OCAMLBEST)
endif

#ounit support
ifeq ("@HAS_OUNIT@","yes")
  TESTS= common deb algo $(TEST_RPM)
endif
