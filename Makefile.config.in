VERSION=@PACKAGE_VERSION@
NAME=@PACKAGE_NAME@

CFLAGS=@CFLAGS@ -fPIC -Wall -pedantic -Werror -Wno-long-long -warn-error FPSXY
CPPFLAGS=@CPPFLAGS@
LDFLAGS=@LDFLAGS@
CPPOFLAGS=-D @OCAMLVERSION@

OCAMLFIND=@OCAMLFIND@

DOSELIBS = _build/doselibs

DESTDIR =
ifeq ($(DESTDIR),)
  exec_prefix=@prefix@
  BINDIR=@bindir@
  ifeq (@libdir@,)
    LIBDIR=$(shell OCAMLFIND_DESTDIR=@prefix@/lib/ocaml ocamlfind printconf destdir)
  else
    LIBDIR=@libdir@
  endif
else
  LIBDIR = $(DESTDIR)/$(shell ocamlc -where)
  BINDIR = $(DESTDIR)/usr/bin
endif

INSTALL=$(OCAMLFIND) install -destdir $(LIBDIR)
UNINSTALL=$(OCAMLFIND) remove -destdir $(LIBDIR)

ifeq ("@OCAML_OS_TYPE@","freebsd")
  LDFLAGS += -fstack-protector
endif

ifeq ("@OCAMLEXT@","native")
  OCAMLBUILD=@OCAMLBUILD@
  INSTALLOPTS=-s
else
  OCAMLBUILD=@OCAMLBUILD@ -byte-plugin
  INSTALLOPTS=
endif

OCAMLEXT=@OCAMLEXT@

TARGETS= \
   distcheck.@OCAMLEXT@ \
	 deb-buildcheck.@OCAMLEXT@ \
   ceve.@OCAMLEXT@ \
   apt-cudf.@OCAMLEXT@ \
	 outdated.@OCAMLEXT@ \
	 challenged.@OCAMLEXT@ \
   deb-coinstall.@OCAMLEXT@

BYTELIBS=
OPTLIBS=
CMXSLIBS=
ALIBS=
SUFFIX=cma

ifeq ("@HAS_LIBCUDF@","no")
  LIBNAMES += cudf/cudf
endif

LIBNAMES += common/common \
						versioning/versioning \
						algo/algo \
						deb/debian \
						opencsw/csw \
						pef/pef \
						opam/opam

#rpm support
ifeq ("@HAS_RPM@","yes")
  LIBNAMES += rpm/rpm
endif

LIBNAMES += doseparseNoRpm/doseparseNoRpm \
						doseparse/doseparse

BYTELIBNAMES=$(notdir $(LIBNAMES))
BYTELIBS=$(BYTELIBNAMES:%=$(DOSELIBS)/%.cma)

ifeq ("@HAS_LIBCUDF@","no")
installcudf:
	$(MAKE) -C cudf all @OCAMLBEST@ install
uninstallcudf:
	$(MAKE) -C cudf uninstall
else
installcudf:
uninstallcudf:
endif

ifeq ("@OCAMLEXT@","native")
  SUFFIX += cmxa cmxs a
  OPTLIBS += $(BYTELIBS:%.cma=%.cmxa) 
  CMXSLIBS += $(BYTELIBS:%.cma=%.cmxs)
  ALIBS = $(BYTELIBS:%.cma=%.a)
endif

ifeq ("@HAS_XML@","yes")
ifeq ("@HAS_CURL@","yes")
  EXPERIMENTAL += experimental/dudftocudf/deb-dudftocudf.@OCAMLEXT@
endif
endif

#ocamlgraph support
ifeq ("@HAS_OCAMLGRAPH@","yes")
  TARGETS += \
	     strong-deps.@OCAMLEXT@ \
	     dominators-graph.@OCAMLEXT@
  
  EXPERIMENTAL += strong-conflicts.@OCAMLEXT@
endif

#ocamlgraph support
ifeq ("@HAS_OCAMLGRAPH@","yes")
  TARGETS += \
	     smallworld.@OCAMLEXT@
endif

#ounit support
ifeq ("@HAS_OUNIT@","yes")
  TESTS= common deb algo pef $(TEST_RPM)
endif
